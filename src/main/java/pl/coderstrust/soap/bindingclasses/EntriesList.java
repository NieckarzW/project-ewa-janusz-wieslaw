//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.06.05 at 12:07:27 PM CEST 
//


package pl.coderstrust.soap.bindingclasses;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for entriesList complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="entriesList"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="invoiceEntries" type="{http://project-10-ewa-januss-wieslaw}invoiceEntry" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "entriesList", propOrder = {
    "invoiceEntries"
})
public class EntriesList
    implements Cloneable, CopyTo, Equals, HashCode, ToString {

  protected List<InvoiceEntry> invoiceEntries;

  /**
   * Gets the value of the invoiceEntries property.
   *
   * <p>
   * This accessor method returns a reference to the live list,
   * not a snapshot. Therefore any modification you make to the
   * returned list will be present inside the JAXB object.
   * This is why there is not a <CODE>set</CODE> method for the invoiceEntries property.
   *
   * <p>
   * For example, to add a new item, do as follows:
   * <pre>
   *    getInvoiceEntries().add(newItem);
   * </pre>
   *
   *
   * <p>
   * Objects of the following type(s) are allowed in the list
   * {@link InvoiceEntry }
   */
  public List<InvoiceEntry> getInvoiceEntries() {
    if (invoiceEntries == null) {
      invoiceEntries = new ArrayList<>();
    }
    return invoiceEntries;
  }

  @Override
  public String toString() {
    ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
    StringBuilder buffer = new StringBuilder();
    append(null, buffer, strategy);
    return buffer.toString();
  }

  @Override
  public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
    strategy.appendStart(locator, this, buffer);
    appendFields(locator, buffer, strategy);
    strategy.appendEnd(locator, this, buffer);
    return buffer;
  }

  @Override
  public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
    {
      List<InvoiceEntry> theInvoiceEntries;
      theInvoiceEntries = (((invoiceEntries != null) && (!invoiceEntries.isEmpty())) ? getInvoiceEntries() : null);
      strategy.appendField(locator, this, "invoiceEntries", buffer, theInvoiceEntries);
    }
    return buffer;
  }

  @Override
  public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
    if (!(object instanceof EntriesList)) {
      return false;
    }
    if (this == object) {
      return true;
    }
    EntriesList that = ((EntriesList) object);
    {
      List<InvoiceEntry> lhsInvoiceEntries;
      lhsInvoiceEntries = (((invoiceEntries != null) && (!invoiceEntries.isEmpty())) ? getInvoiceEntries() : null);
      List<InvoiceEntry> rhsInvoiceEntries;
      rhsInvoiceEntries = (((that.invoiceEntries != null) && (!that.invoiceEntries.isEmpty())) ? that.getInvoiceEntries() : null);
      return strategy.equals(LocatorUtils.property(thisLocator, "invoiceEntries", lhsInvoiceEntries), LocatorUtils.property(thatLocator, "invoiceEntries", rhsInvoiceEntries), lhsInvoiceEntries, rhsInvoiceEntries);
    }
  }

  @Override
  public boolean equals(Object object) {
    EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
    return equals(null, null, object, strategy);
  }

  @Override
  public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
    int currentHashCode = 1;
    {
      List<InvoiceEntry> theInvoiceEntries;
      theInvoiceEntries = (((invoiceEntries != null) && (!invoiceEntries.isEmpty())) ? getInvoiceEntries() : null);
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "invoiceEntries", theInvoiceEntries), currentHashCode, theInvoiceEntries);
    }
    return currentHashCode;
  }

  @Override
  public int hashCode() {
    HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
    return hashCode(null, strategy);
  }

  @Override
  public Object clone() {
    return copyTo(createNewInstance());
  }

  @Override
  public Object copyTo(Object target) {
    CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
    return copyTo(null, target, strategy);
  }

  @Override
  public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
    Object draftCopy = ((target == null) ? createNewInstance() : target);
    if (draftCopy instanceof EntriesList) {
      EntriesList copy = ((EntriesList) draftCopy);
      if ((invoiceEntries != null) && (!invoiceEntries.isEmpty())) {
        List<InvoiceEntry> sourceInvoiceEntries;
        sourceInvoiceEntries = (((invoiceEntries != null) && (!invoiceEntries.isEmpty())) ? getInvoiceEntries() : null);
        @SuppressWarnings("unchecked")
        List<InvoiceEntry> copyInvoiceEntries = ((List<InvoiceEntry>) strategy.copy(LocatorUtils.property(locator, "invoiceEntries", sourceInvoiceEntries), sourceInvoiceEntries));
        copy.invoiceEntries = null;
        if (copyInvoiceEntries != null) {
          List<InvoiceEntry> uniqueInvoiceEntriesl = copy.getInvoiceEntries();
          uniqueInvoiceEntriesl.addAll(copyInvoiceEntries);
        }
      } else {
        copy.invoiceEntries = null;
      }
    }
    return draftCopy;
  }

  @Override
  public Object createNewInstance() {
    return new EntriesList();
  }

}
