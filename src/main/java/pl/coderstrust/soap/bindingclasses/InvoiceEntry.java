//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.06.05 at 12:07:27 PM CEST 
//


package pl.coderstrust.soap.bindingclasses;

import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for invoiceEntry complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>
 * &lt;complexType name="invoiceEntry"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;element name="grossValue" type="{http://www.w3.org/2001/XMLSchema}decimal"/&gt;
 *         &lt;element name="price" type="{http://www.w3.org/2001/XMLSchema}decimal"/&gt;
 *         &lt;element name="productName" type="{http://www.w3.org/2001/XMLSchema}string"/&gt;
 *         &lt;element name="quantity" type="{http://www.w3.org/2001/XMLSchema}long"/&gt;
 *         &lt;element name="vatRate" type="{http://project-10-ewa-januss-wieslaw}vat"/&gt;
 *         &lt;element name="vatValue" type="{http://www.w3.org/2001/XMLSchema}decimal"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "invoiceEntry", propOrder = {
    "id",
    "grossValue",
    "price",
    "productName",
    "quantity",
    "vatRate",
    "vatValue"
})
public class InvoiceEntry
    implements Cloneable, CopyTo, Equals, HashCode, ToString {

  protected long id;
  @XmlElement(required = true)
  protected BigDecimal grossValue;
  @XmlElement(required = true)
  protected BigDecimal price;
  @XmlElement(required = true)
  protected String productName;
  protected long quantity;
  @XmlElement(required = true)
  @XmlSchemaType(name = "string")
  protected Vat vatRate;
  @XmlElement(required = true)
  protected BigDecimal vatValue;

  /**
   * Gets the value of the id property.
   */
  public long getId() {
    return id;
  }

  /**
   * Sets the value of the id property.
   */
  public void setId(long value) {
    id = value;
  }

  /**
   * Gets the value of the grossValue property.
   *
   * @return possible object is
   * {@link BigDecimal }
   */
  public BigDecimal getGrossValue() {
    return grossValue;
  }

  /**
   * Sets the value of the grossValue property.
   *
   * @param value allowed object is
   *              {@link BigDecimal }
   */
  public void setGrossValue(BigDecimal value) {
    grossValue = value;
  }

  /**
   * Gets the value of the price property.
   *
   * @return possible object is
   * {@link BigDecimal }
   */
  public BigDecimal getPrice() {
    return price;
  }

  /**
   * Sets the value of the price property.
   *
   * @param value allowed object is
   *              {@link BigDecimal }
   */
  public void setPrice(BigDecimal value) {
    price = value;
  }

  /**
   * Gets the value of the productName property.
   *
   * @return possible object is
   * {@link String }
   */
  public String getProductName() {
    return productName;
  }

  /**
   * Sets the value of the productName property.
   *
   * @param value allowed object is
   *              {@link String }
   */
  public void setProductName(String value) {
    productName = value;
  }

  /**
   * Gets the value of the quantity property.
   */
  public long getQuantity() {
    return quantity;
  }

  /**
   * Sets the value of the quantity property.
   */
  public void setQuantity(long value) {
    quantity = value;
  }

  /**
   * Gets the value of the vatRate property.
   *
   * @return possible object is
   * {@link Vat }
   */
  public Vat getVatRate() {
    return vatRate;
  }

  /**
   * Sets the value of the vatRate property.
   *
   * @param value allowed object is
   *              {@link Vat }
   */
  public void setVatRate(Vat value) {
    vatRate = value;
  }

  /**
   * Gets the value of the vatValue property.
   *
   * @return possible object is
   * {@link BigDecimal }
   */
  public BigDecimal getVatValue() {
    return vatValue;
  }

  /**
   * Sets the value of the vatValue property.
   *
   * @param value allowed object is
   *              {@link BigDecimal }
   */
  public void setVatValue(BigDecimal value) {
    vatValue = value;
  }

  @Override
  public String toString() {
    ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
    StringBuilder buffer = new StringBuilder();
    append(null, buffer, strategy);
    return buffer.toString();
  }

  @Override
  public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
    strategy.appendStart(locator, this, buffer);
    appendFields(locator, buffer, strategy);
    strategy.appendEnd(locator, this, buffer);
    return buffer;
  }

  @Override
  public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
    {
      long theId;
      theId = (true ? getId() : 0L);
      strategy.appendField(locator, this, "id", buffer, theId);
    }
    {
      BigDecimal theGrossValue;
      theGrossValue = getGrossValue();
      strategy.appendField(locator, this, "grossValue", buffer, theGrossValue);
    }
    {
      BigDecimal thePrice;
      thePrice = getPrice();
      strategy.appendField(locator, this, "price", buffer, thePrice);
    }
    {
      String theProductName;
      theProductName = getProductName();
      strategy.appendField(locator, this, "productName", buffer, theProductName);
    }
    {
      long theQuantity;
      theQuantity = (true ? getQuantity() : 0L);
      strategy.appendField(locator, this, "quantity", buffer, theQuantity);
    }
    {
      Vat theVatRate;
      theVatRate = getVatRate();
      strategy.appendField(locator, this, "vatRate", buffer, theVatRate);
    }
    {
      BigDecimal theVatValue;
      theVatValue = getVatValue();
      strategy.appendField(locator, this, "vatValue", buffer, theVatValue);
    }
    return buffer;
  }

  @Override
  public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
    if (!(object instanceof InvoiceEntry)) {
      return false;
    }
    if (this == object) {
      return true;
    }
    InvoiceEntry that = ((InvoiceEntry) object);
    {
      long lhsId;
      lhsId = (true ? getId() : 0L);
      long rhsId;
      rhsId = (true ? that.getId() : 0L);
      if (!strategy.equals(LocatorUtils.property(thisLocator, "id", lhsId), LocatorUtils.property(thatLocator, "id", rhsId), lhsId, rhsId)) {
        return false;
      }
    }
    {
      BigDecimal lhsGrossValue;
      lhsGrossValue = getGrossValue();
      BigDecimal rhsGrossValue;
      rhsGrossValue = that.getGrossValue();
      if (!strategy.equals(LocatorUtils.property(thisLocator, "grossValue", lhsGrossValue), LocatorUtils.property(thatLocator, "grossValue", rhsGrossValue), lhsGrossValue, rhsGrossValue)) {
        return false;
      }
    }
    {
      BigDecimal lhsPrice;
      lhsPrice = getPrice();
      BigDecimal rhsPrice;
      rhsPrice = that.getPrice();
      if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
        return false;
      }
    }
    {
      String lhsProductName;
      lhsProductName = getProductName();
      String rhsProductName;
      rhsProductName = that.getProductName();
      if (!strategy.equals(LocatorUtils.property(thisLocator, "productName", lhsProductName), LocatorUtils.property(thatLocator, "productName", rhsProductName), lhsProductName, rhsProductName)) {
        return false;
      }
    }
    {
      long lhsQuantity;
      lhsQuantity = (true ? getQuantity() : 0L);
      long rhsQuantity;
      rhsQuantity = (true ? that.getQuantity() : 0L);
      if (!strategy.equals(LocatorUtils.property(thisLocator, "quantity", lhsQuantity), LocatorUtils.property(thatLocator, "quantity", rhsQuantity), lhsQuantity, rhsQuantity)) {
        return false;
      }
    }
    {
      Vat lhsVatRate;
      lhsVatRate = getVatRate();
      Vat rhsVatRate;
      rhsVatRate = that.getVatRate();
      if (!strategy.equals(LocatorUtils.property(thisLocator, "vatRate", lhsVatRate), LocatorUtils.property(thatLocator, "vatRate", rhsVatRate), lhsVatRate, rhsVatRate)) {
        return false;
      }
    }
    {
      BigDecimal lhsVatValue;
      lhsVatValue = getVatValue();
      BigDecimal rhsVatValue;
      rhsVatValue = that.getVatValue();
      return strategy.equals(LocatorUtils.property(thisLocator, "vatValue", lhsVatValue), LocatorUtils.property(thatLocator, "vatValue", rhsVatValue), lhsVatValue, rhsVatValue);
    }
  }

  @Override
  public boolean equals(Object object) {
    EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
    return equals(null, null, object, strategy);
  }

  @Override
  public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
    int currentHashCode = 1;
    {
      long theId;
      theId = (true ? getId() : 0L);
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "id", theId), currentHashCode, theId);
    }
    {
      BigDecimal theGrossValue;
      theGrossValue = getGrossValue();
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "grossValue", theGrossValue), currentHashCode, theGrossValue);
    }
    {
      BigDecimal thePrice;
      thePrice = getPrice();
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
    }
    {
      String theProductName;
      theProductName = getProductName();
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "productName", theProductName), currentHashCode, theProductName);
    }
    {
      long theQuantity;
      theQuantity = (true ? getQuantity() : 0L);
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "quantity", theQuantity), currentHashCode, theQuantity);
    }
    {
      Vat theVatRate;
      theVatRate = getVatRate();
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vatRate", theVatRate), currentHashCode, theVatRate);
    }
    {
      BigDecimal theVatValue;
      theVatValue = getVatValue();
      currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "vatValue", theVatValue), currentHashCode, theVatValue);
    }
    return currentHashCode;
  }

  @Override
  public int hashCode() {
    HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
    return hashCode(null, strategy);
  }

  @Override
  public Object clone() {
    return copyTo(createNewInstance());
  }

  @Override
  public Object copyTo(Object target) {
    CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
    return copyTo(null, target, strategy);
  }

  @Override
  public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
    Object draftCopy = ((target == null) ? createNewInstance() : target);
    if (draftCopy instanceof InvoiceEntry) {
      InvoiceEntry copy = ((InvoiceEntry) draftCopy);
      long sourceId;
      sourceId = (true ? getId() : 0L);
      long copyId = strategy.copy(LocatorUtils.property(locator, "id", sourceId), sourceId);
      copy.setId(copyId);
      if (grossValue != null) {
        BigDecimal sourceGrossValue;
        sourceGrossValue = getGrossValue();
        BigDecimal copyGrossValue = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "grossValue", sourceGrossValue), sourceGrossValue));
        copy.setGrossValue(copyGrossValue);
      } else {
        copy.grossValue = null;
      }
      if (price != null) {
        BigDecimal sourcePrice;
        sourcePrice = getPrice();
        BigDecimal copyPrice = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
        copy.setPrice(copyPrice);
      } else {
        copy.price = null;
      }
      if (productName != null) {
        String sourceProductName;
        sourceProductName = getProductName();
        String copyProductName = ((String) strategy.copy(LocatorUtils.property(locator, "productName", sourceProductName), sourceProductName));
        copy.setProductName(copyProductName);
      } else {
        copy.productName = null;
      }
      long sourceQuantity;
      sourceQuantity = (true ? getQuantity() : 0L);
      long copyQuantity = strategy.copy(LocatorUtils.property(locator, "quantity", sourceQuantity), sourceQuantity);
      copy.setQuantity(copyQuantity);
      if (vatRate != null) {
        Vat sourceVatRate;
        sourceVatRate = getVatRate();
        Vat copyVatRate = ((Vat) strategy.copy(LocatorUtils.property(locator, "vatRate", sourceVatRate), sourceVatRate));
        copy.setVatRate(copyVatRate);
      } else {
        copy.vatRate = null;
      }
      if (vatValue != null) {
        BigDecimal sourceVatValue;
        sourceVatValue = getVatValue();
        BigDecimal copyVatValue = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "vatValue", sourceVatValue), sourceVatValue));
        copy.setVatValue(copyVatValue);
      } else {
        copy.vatValue = null;
      }
    }
    return draftCopy;
  }

  @Override
  public Object createNewInstance() {
    return new InvoiceEntry();
  }

}
